model_boot_li <- lm(formula = employed ~
nwifeinc + age + I(age^2) + nwifeinc : hasKids + hasKids,
data=X_boot)
boot_est$age_STD_est[i] <- summary(model_boot_li)$coef[3, 2]
boot_est$age_COEF_est[i] <- summary(model_boot_li)$coef[3, 1]
}
get_confidence <- function(column){
conf <- 0.95
alpha <- 1 - conf
q_L_2 <- quantile(column, alpha / 2)
q_R_2 <- quantile(column, 1 - alpha / 2)
return(c(q_L_2, q_R_2))
}
confs <- data.frame(rbind(get_confidence(boot_est$age_COEF_est), get_confidence(boot_est$age_STD_est)),
"R est."=c(0.0132621, 0.0244005))
colnames(confs)[1] <- "2.5%"
colnames(confs)[2] <- "97.5%"
rownames(confs)[1] <- "COEF"
rownames(confs)[2] <- "STD"
stargazer(confs, summary=FALSE)
model_probit <- glm(formula = employed ~
nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
stargazer(model_probit, no.space=TRUE, ci=TRUE, ci.level=0.90, single.row=TRUE)
summary(model_probit)
# 3.3 оценка вероятности для произвольного индивида
new_person <- data.frame("nwifeinc"=0, "age"=21, "hasKids"=0)
prediction <- predict(model_probit, newdata = new_person, type="response")
new_person$prediction <- prediction
stargazer(new_person, summary=FALSE)
# 3.4 предельные эффекты для переменных
model_probit <- glm(formula = employed ~
nwifeinc + age + I(age^2) + nwifeinc : hasKids + hasKids,
data=h,
family=binomial(link="probit"))
new_person <- new_person[, 1:3] # выкидываем столбец prediction
new_person_ME <- margins(model_probit, at=new_person, type="response")
frame_ME <- data.frame("nwifeinc"=mean(new_person_ME$dydx_nwifeinc),
"age"=mean(new_person_ME$dydx_age),
"hasKids"=mean(new_person_ME$dydx_hasKids))
stargazer(frame_ME, summary=FALSE)
# 3.5 сконструируем среднего индивида
# Будем руками формировать, потому что есть дамми переменная
childfree_women <- h[(h$hasKids == 0), ]
mean_childfree_woman <- data.frame("age"=mean(childfree_women$age),
"nwifeinc"=mean(childfree_women$nwifeinc),
"hasKids"=0)
childloving_women <- h[(h$hasKids == 1), ]
mean_childloving_woman <- data.frame("age"=mean(childloving_women$age),
"nwifeinc"=mean(childloving_women$nwifeinc),
"hasKids"=1)
all_mean <- rbind(mean_childfree_woman, mean_childloving_woman)
mean_person_ME <- margins(model_probit, at = all_mean, type="response")
# 3.5 сконструируем медианного индивида
# Будем руками формировать, потому что есть дамми переменная
childfree_women <- h[(h$hasKids == 0), ]
median_childfree_woman <- data.frame("age"=median(childfree_women$age),
"nwifeinc"=median(childfree_women$nwifeinc),
"hasKids"=0)
childloving_women <- h[(h$hasKids == 1), ]
median_childloving_woman <- data.frame("age"=median(childloving_women$age),
"nwifeinc"=median(childloving_women$nwifeinc),
"hasKids"=1)
all_median <- rbind(median_childfree_woman, median_childloving_woman)
median_person_ME <- margins(model_probit, at = all_median, type="response")
# Выводы в таблицу в латех
stargazer(data.frame(
"kind"=c('Median', "Median", "Mean", "Mean"),
"age"=c(45, 34, 44.32, 35.20),
"nwifeinc"=c(17.79, 17.51, 19.99, 20.72),
"hasKids"=c(0, 1, 0, 1),
"nwifeinc_ME"=c(-0.004455, -0.004396, -0.004457, -0.004309),
"age_ME"=c(-0.013682, -0.008297, -0.013343, -0.008744),
"hasKids_ME"=c(-0.3605, -0.3692, -0.3604, -0.3614)
), summary=FALSE)
# Предельный эффект для произвольной переменной
margins(model_probit, variables = 'age', type="response")
true_share <- function(model, h){
print(attr(model, "class")[1])
prob_es <- predict(model, type="response")
employed_est <- as.numeric(prob_es > 0.5)
true_positive <- sum((employed_est == 1) & (h$employed == 1))
true_negative <- sum((employed_est == 0) & (h$employed == 0))
true_pred <- true_positive + true_negative
true_pred_share <- true_pred / dim(h)[1]
return(true_pred_share)
}
# доля для пробита, наивного прогноза и линейной модели
true_share_probit     <- true_share(model_probit, h)
true_share_li         <- true_share(model_li, h)
true_naive_pred_share <- max(mean(h$employed), 1 - mean(h$employed))
stargazer(data.frame("Probit"=true_share_probit, "Linear"=true_share_li, "Naive"=true_naive_pred_share), summary=FALSE)
# 4.2. !!! Поскольку тест не выявлял гетероскедастичность остатков
# добавил переменную repwage (объяснил это в пдф)
model_hetprobit <- hetglm(formula = employed ~
nwifeinc + age + I(age^2) + nwifeinc : hasKids + hasKids +repwage
| repwage+age,
data = h,
family = binomial(link = "probit"),
link.scale = "log")
summary(model_hetprobit)
# 4.4
# H_0: \beta_age = 0
model_probit_ext <- glm(formula = employed ~
nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "logit"))
model_probit_restr <- glm(formula = employed ~
nwifeinc + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "logit"))
lrtest(model_probit_ext, model_probit_restr)
# 4.4.2
model_probit_restr <- glm(formula = employed ~
nwifeinc +I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "logit"))
lrtest(model_probit_ext, model_probit_restr) # pvalue - большой -> оснвоная не отвергается
# 4.4.1
# H_0: \beta_age = 0
model_probit_ext <- glm(formula = employed ~
nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
model_probit_restr <- glm(formula = employed ~
nwifeinc + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
lrtest(model_probit_ext, model_probit_restr) # pvalue - большой -> оснвоная не отвергается
# 4.4.2
model_probit_restr <- glm(formula = employed ~
nwifeinc +I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
lrtest(model_probit_ext, model_probit_restr) # pvalue - маленький -> оснвоная отвергается
age_lin_zero <- lrtest(model_probit_ext, model_probit_restr) # pvalue - большой -> оснвоная не отвергается
age_zero <- lrtest(model_probit_ext, model_probit_restr) # pvalue - маленький -> оснвоная отвергается
age_lin_zero
attributes(age_lin_zero)
age_lin_zero
attributes(age_lin_zero[2])
age_lin_zero[2, 1]
age_lin_zero[2, 1]
age_lin_zero
age_lin_zero[2, 5]
data.frame('P-value'=c(age_lin_zero[2, 5], age_zero[2, 5]))
age_lin_zero <- lrtest(model_probit_ext, model_probit_restr) # pvalue - большой -> оснвоная не отвергается
# 4.4.1
# H_0: \beta_age = 0
model_probit_ext <- glm(formula = employed ~
nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
model_probit_restr <- glm(formula = employed ~
nwifeinc + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
age_lin_zero <- lrtest(model_probit_ext, model_probit_restr) # pvalue - большой -> оснвоная не отвергается
# 4.4.2
model_probit_restr <- glm(formula = employed ~
nwifeinc +I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
age_zero <- lrtest(model_probit_ext, model_probit_restr) # pvalue - маленький -> оснвоная отвергается
age_lin_zero[2, 5]
data.frame('P-value'=c(age_lin_zero[2, 5], age_zero[2, 5]))
data.frame('P-value'=c(age_lin_zero[2, 5], age_zero[2, 5]),
row.names = c('age', 'age + age^2'))
data.frame('P-value'=c(age_lin_zero[2, 5], age_zero[2, 5]),
row.names = c('age', 'age + age^2'))
stargazer(data.frame('P-value'=c(age_lin_zero[2, 5], age_zero[2, 5]),
row.names = c('age', 'age + age^2')),
summary=FALSE)
# 4.4.3
# H_0: age = k*age^2
k_times <- function(k){
model_full <- glm(formula = employed ~ nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h, family = binomial(link = "probit"))
model_restr <- glm(formula = employed ~ nwifeinc + I(age + age^2 * k) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
return(lrtest(model_full, model_restr))
}
model_logit <- glm(formula = employed ~
nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "logit"))
k_times
k_times(10)
k_times(1)
k_times(2)
k_times(4)
k_times(99999)
k_times(999999999999)
k_times(0.0001)
k_times(0.000000001)
k_times(-0.000000001)
k_times(-1)
k_times(-99991)
k_times(0)
print(k_times(0))
return(lrtest(model_full, model_restr))
# 4.4.3
# H_0: age = k*age^2
k_times_test <- function(k){
model_full <- glm(formula = employed ~ nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h, family = binomial(link = "probit"))
model_restr <- glm(formula = employed ~ nwifeinc + I(age + age^2 * k) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "probit"))
return(lrtest(model_full, model_restr))
}
print(k_times_test(0))
return(lrtest(model_full, model_restr))
# 4.4.4
k_times_and_t_test <- function(k, t){
model_full <- glm(formula = employed ~ nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h, family = binomial(link = "probit"))
model_restr <- glm(formula = employed ~ nwifeinc + I(age + age^2 * k) + I(nwifeinc * hasKids) + hasKids,
data=h,
offset= I(t*hasKids),
family = binomial(link = "probit"))
return(lrtest(model_full, model_restr))
}
print(k_times_and_t_test(1, 2))
print(k_times_and_t_test(1, 3))
print(k_times_and_t_test(1, 4))
print(k_times_and_t_test(1, 0))
print(k_times_and_t_test(1, -1000))
# 4.4.4
k_times_and_t_test <- function(k, t){
model_full <- glm(formula = employed ~ nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h, family = binomial(link = "probit"))
model_restr <- glm(formula = employed ~ nwifeinc + I(age + age^2 * k) + I(nwifeinc * hasKids),
data=h,
offset= I(t*hasKids),
family = binomial(link = "probit"))
return(lrtest(model_full, model_restr))
}
print(k_times_and_t_test(1, -1000))
print(k_times_and_t_test(1, 1))
print(k_times_and_t_test(1, 2))
print(k_times_and_t_test(1, 20000))
print(k_times_and_t_test(1, 1.3))
print(k_times_and_t_test(2, 1.3))
print(k_times_and_t_test(200, 1.3))
print(k_times_and_t_test(20000000, 1.3))
print(k_times_and_t_test(20000000, 20000000))
print(k_times_and_t_test(200, 1.3))
print(k_times_and_t_test(1, 1.3))
print(k_times_and_t_test(0.5, 1.3))
print(k_times_and_t_test(0.5, 0))
model_restr <- glm(formula = employed ~ nwifeinc + I(age + age^2 * k) ,
data=h,
offset= I(t * hasKids) + I(nwifeinc * t*hasKids),
family = binomial(link = "probit"))
return(lrtest(model_full, model_restr))
# 4.4.4
k_times_and_t_test <- function(k, t){
model_full <- glm(formula = employed ~ nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h, family = binomial(link = "probit"))
model_restr <- glm(formula = employed ~ nwifeinc + I(age + age^2 * k) ,
data=h,
offset= I(t * hasKids) + I(nwifeinc * t*hasKids),
family = binomial(link = "probit"))
return(lrtest(model_full, model_restr))
}
print(k_times_and_t_test(0.5, 0))
print(k_times_and_t_test(0.5, 1))
model_logit <- glm(formula = employed ~
nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids,
data=h,
family = binomial(link = "logit"))
print(k_times_and_t_test(0.5, 1))
print(k_times_and_t_test(0.5, 2))
print(k_times_and_t_test(0.5, -200))
print(k_times_and_t_test(0.5, e-10))
print(k_times_and_t_test(0.5, e-10))
print(k_times_and_t_test(0.5, 1e-10))
print(k_times_and_t_test(0.5, 1e-100))
print(k_times_test(k=2))
print(k_times_test(k = 1e-3))
print(k_times_test(k = 1e-30))
print(k_times_test(k = 1e-3))
print(k_times_test(k = -1e-3))
print(k_times_test(k = 1e-3))
print(k_times_test(k = 20))
h
head(h)
# Подготавливаем данные для анализа
X_given <- h[, c('nwifeinc', 'age', 'lfp', 'wage', 'repwage', 'city')]
data(Mroz87)
h <- na.omit(Mroz87)
h
# Подготавливаем данные для анализа
X_given <- h[, c('nwifeinc', 'age', 'lfp', 'wage', 'repwage', 'city')]
# Если у женщины есть маленькие детки, то для нее дамми = 1
hasKids <- as.numeric(h[, 'kids5'] > 0)
h <- cbind(1, X_given, hasKids)
colnames(h)[1] <- "Const"
colnames(h)[4] <- "employed"
head(h)
print(check_function())
# 4.4.5
# Нужно просто проверить значимость коэффициента перед дамми - город:
check_function <- function(){
model_full <- glm(formula = employed ~ nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids + city,
data=h, family = binomial(link = "probit"))
model_restr <- glm(formula = employed ~ nwifeinc + age + I(age^2) + I(nwifeinc * hasKids),
data=h,
family = binomial(link = "probit"))
return(lrtest(model_full, model_restr))
}
print(check_function())
# выполнения домашнего задания
library("GJRM")                                                  # система бинарных уравнений
head(h)
formula_1 <- employed ~ nwifeinc + age + I(age^2) + I(nwifeinc * hasKids) + hasKids
formula_2 <- city ~ wage + hasKids + employed + age + I(age^2)
formula_2
class(formula_2)
model_bp <- gjrm(formula = list(formula_1, formula_2),
data=h,
Model="B",
margins = c("probit", "probit"),
BivD="N")
summary(model_bp)
stargazer(model_bp, summary = FALSE)
class(model_bp)
attributes(model_bp)
model_bp
summary(model_bp)
install.packages('rio')
usd <- import(file.choose())
library(forecast)
library(tidyverse)
library(tseries)
library(gridExtra)
library(rio)
usd <- import(file.choose())
zvr <- import(file.choose())
library(forecast)
library(tidyverse)
library(tseries)
library(gridExtra)
library(rio)
usd <- import(file.choose())
zvr <- import(file.choose())
View(usd)
usd$USD
plot(usd$T, usd$USD)
plot(usd$T, usd$USD, type='l')
View(usd)
usd_ts <- ts(usd, start=c(1997, 1), frequency=12)
usd_ts
usd_ts <- ts(usd$USD, start=c(1997, 1), frequency=12)
usd_ts
zvr_ts <- ts(zvr$ZVR, start=c(1997, 1), frequency=12)
zvr_ts
plot(usd_ts, type='l')
autoplot()
plot(zvr_ts, type='l')
plot(log(zvr_ts), type='l')
plot(log(usd_ts), type='l')
ggAcf(usd_ts)
ggPacf(usd_ts)
ggAcf(usd_ts)
ggAcf(zvr_ts)
ggPacf(zvr_ts)
Box.test(zvr_ts, lag=24, fitdf = 0, type='Lj')
usd <- import(file.choose())
library(gridExtra)
library(readr)
library(readr)
library(forecast)
library(forecast)
library(ggplot2)
library(ggplot2)
library(gridExtra)
arima
?arima.sim
head(usconsumption)
library(fpp)
library(fpp)
library(vars)
data(usconsumption, package = "fpp")
head(usconsumption)
library(vars)
data(usconsumption, package = "fpp")
head(usconsumption)
```{r, eval=F}
Загружаем данные из пакетов:
```{r}
data(usconsumption, package = "fpp")
head(usconsumption)
```
Загружаем данные из пакетов:
```{r}
data(usconsumption, package = "fpp")
head(usconsumption)
```
Загружаем данные из пакетов:
```{r}
data(usconsumption, package = "fpp")
head(usconsumption)
```
data(usconsumption, package = "fpp")
head(usconsumption)
VARselect(usconsumption, lag.max=7, type="const")
VARselect(usconsumption, lag.max=7, type="const")$selection
?Var
library(fpp)
library(vars)
data(usconsumption, package = "fpp")
head(usconsumption)
var1 <- Var()
?VAR
?VAR
var1 <- VAR(usconsumption, p=1, type="cinst")
var1 <- VAR(usconsumption, p=1, type="const")
summary(var1)
savehistory(file = "Buchko_retake.Rhistory")
setwd("~/Desktop/Учеба/2 семестр/3 модуль/дз2")
ls
!ls
ls
ls()
$ls
df <- read.csv('hprice1.csv')
df
library(sandvich)
df <- read.csv('hprice1.csv')
model <- lm(price ~ sqrft + bdrms, data=df)
model
summary(model)
coeftest(model, vcov = vcovHC(model, type = "HC1"))
library(sandvich)
library(lmtest)
library(sandwich)
library(stargazer)
df <- read.csv('hprice1.csv')
model <- lm(price ~ sqrft + bdrms, data=df, )
model
summary(model)
coeftest(model, vcov = vcovHC(model, type = "HC1"))
df
df['price']
model <- lm(price ~ sqrft + bdrms, data=df, )
model
summary(model)
coeftest(model, vcov = vcovHC(model, type = "HC1"))
df
df['bdrms']
mean(df['bdrms'])
mean(df[['bdrms']])
df['sqrft']
summary(model)
coeftest(model, vcov = vcovHC(model, type = "HC1"))
library(margins)
summary(margins(model))
summary(margins(model, at=list(sqrft=140)))
summary(margins(model, at=list(sqrft=1400)))
summary(model)
help(predict)
predict(model, newdata = list(sqrft=2438, bdrms=4))
help("predict")
df['sqrft']
# task 2
df <- read.csv('cps99 ps1.csv')
# task 2
df <- read.csv('cps99_ps1.csv')
df
corr(df)
corr(df['yrseduc'])
coerr(df['yrseduc'])
cor(df)
cor(df[['yrseduc']])
cor(df[['yrseduc', 'yrseduc']])
cor(df[['yrseduc'], [ 'yrseduc']])
cor(df[['yrseduc', 'yrseduc']])
cor(df[['yrseduc', 'ba']])
cor(df[['yrseduc']], df[['yrseduc']])
cor(df[['yrseduc']], df[['female']])
# task 8
df <- read.csv('cps99_ps1.csv')
m1 <- lm(ahe ~yrseduc,  data=df)
m2 <- lm(ahe ~yrseduc + female,  data=df)
summary(m1)
summary(m2)
stargazer(summary(m1))
stargazer(summary(m1))
stargazer(m1)
stargazer(m2)
summary(m1)
summary(m2)
# task 9
m <- lm(ahe ~ yrseduc + ba, data=df)
summary(m)
coeftest(m, vcov = vcovHC(m, type = "HC1"))
margins(m)
coeftest(m, vcov = vcovHC(m, type = "HC1"))
stargazer(coeftest(m, vcov = vcovHC(m, type = "HC1")))
confint(m, vcov = vcovHC(m, type = "HC1"))
help("confint")
confint(m, vcov = vcovHC(m, type = "HC1"), level=0.9)
stargazer(confint(m, vcov = vcovHC(m, type = "HC1"), level=0.9))
stargazer(confint(m, vcov = vcovHC(m, type = "HC1"), level=0.95))
16 * (1.037, 1.371)
16 * c(1.037, 1.371)
c(16.592, 21.936) + c(-0.133, 1.705)
c(16.459, 23.641) / c(16.592, 21.936)
